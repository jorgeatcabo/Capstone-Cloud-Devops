version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@6.15.0

jobs:
  test-docker-file: 
      docker:
        - image: python:3.7.3-stretch

      working_directory: ~/repo
      steps:
        - checkout
        - run:
            name: install hadolint
            command: |
              # Install hadolint
              wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64 &&\
              chmod +x /bin/hadolint
        - run:
            name: run lint
            command: |
              hadolint ./Dockerfile
  build:
    working_directory: /app
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk --upgrade add --no-cache curl gettext \
              py-pip=9.0.0-r1
            pip install \
              --upgrade awscli
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            docker build --cache-from=app -t app .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
      - deploy:
          name: Push application Docker image to AWS ECR
          command: |
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              login="$(aws ecr get-login --region ${AWS_REGION})"
              ${login}
              docker tag app "${AWS_ECR_ACCOUNT_URL}/nodejs-app:latest"
              docker push "${AWS_ECR_ACCOUNT_URL}/nodejs-app:latest"
            fi
      - run:
          name: Deploy
          command: |
            aws eks --region $AWS_REGION update-kubeconfig --name $CLUSTER_NAME
            curl -LO https://dl.k8s.io/release/v1.23.6/bin/linux/amd64/kubectl
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            SUCCESS=$(curl --insecure https://kvdb.io/HsfNexDRL41cZ4tMRwcmu2/${CLUSTER_NAME})
            if [ "$SUCCESS" -eq "0" ]
            then
              echo "Create New Deployment"
              kubectl apply -f .k8s/templates/deployment.yml
              curl --insecure -d '1'  https://kvdb.io/HsfNexDRL41cZ4tMRwcmu2/${CLUSTER_NAME}
            else
              kubectl get pods
              echo "Rollout and Update Deployment"
              kubectl rollout restart deployment/app-staging-deployment
            fi

  deploy-infrastructure:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
      - run:
          name: Ensure EKS exists
          command: |
            curl --insecure -d '0'  https://kvdb.io/HsfNexDRL41cZ4tMRwcmu2/${CLUSTER_NAME}
            eksctl create cluster --name $CLUSTER_NAME --region=us-west-1      
      #- destroy-environment         

workflows:
  build_and_push_image:
    jobs:
      - deploy-infrastructure:
          filters:
            branches:
              only: main
#      - test-docker-file:
#          filters:
#            branches:
#              only: main 
#      - build:
#          requires: [test-docker-file]      
#          filters:
#            branches:
#              only: main
