version: 2.1

commands:
  destroy-environment:
    description: Destroy EKS.    
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            eksctl delete cluster --name $CLUSTER_NAME --region=us-west-1

orbs:
  # https://circleci.com/developer/orbs/orb/circleci/aws-ecr
  aws-ecr: circleci/aws-ecr@6.15.0

jobs:
  build:
    working_directory: /app
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk --upgrade add --no-cache curl gettext \
              py-pip=9.0.0-r1
            pip install \
              docker-compose==1.12.0 \
              --upgrade awscli
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            docker build --cache-from=app -t app .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
      #- run:
      #    name: Run tests
      #    command: |
      #      docker-compose -f ./docker-compose.test.yml up
      - deploy:
          name: Push application Docker image to AWS ECR
          command: |
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              login="$(aws ecr get-login --region ${AWS_REGION})"
              ${login}
              docker tag app "${AWS_ECR_ACCOUNT_URL}/nodejs-app:latest"
              docker push "${AWS_ECR_ACCOUNT_URL}/nodejs-app:latest"
            fi
            
#      - run:
#          name: Install kubectl
#          command: |
#            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
#            chmod +x kubectl
#            mkdir -p ~/.local/bin
#            mv ./kubectl ~/.local/bin/kubectl

      - run:
          name: Deploy
          command: |
            aws eks --region $AWS_REGION update-kubeconfig --name $CLUSTER_NAME
            curl -LO https://dl.k8s.io/release/v1.23.6/bin/linux/amd64/kubectl
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client
            kubectl get pods
            SUCCESS=$(curl --insecure https://kvdb.io/HsfNexDRL41cZ4tMRwcmu2/${CLUSTER_NAME})
            echo $SUCCESS
            if [$SUCCESS==0]
            then
              echo "Create New Deployment"
              kubectl apply -f .k8s/templates/deployment.yml
              curl --insecure -d '1'  https://kvdb.io/HsfNexDRL41cZ4tMRwcmu2/${CLUSTER_NAME}
            else
              echo "Rollout and Update Deployment"
              kubectl rollout restart deployment/app-staging-deployment
            fi

  deploy-infrastructure:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
      - run:
          name: Ensure EKS exists
          command: |
            curl --insecure -d '0'  https://kvdb.io/HsfNexDRL41cZ4tMRwcmu2/${CLUSTER_NAME}
            eksctl create cluster --name $CLUSTER_NAME --region=us-west-1      
      #- destroy-environment         


workflows:
  build_and_push_image:
    jobs:
#      - deploy-infrastructure:
#          filters:
#            branches:
#              only: main     
      - build:
          filters:
            branches:
              only: main 
              
#      - build_image_and_deploy_staging:
#          filters:
#            branches:
#              only: main


#      - aws-ecr/build-and-push-image:
#          account-url: AWS_ECR_ACCOUNT_URL
#          aws-access-key-id: AWS_ACCESS_KEY_ID
#          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
#          dockerfile: Dockerfile
#          path: .
#          region: AWS_REGION
#          repo: nodejs-app
#          tag: "$CIRCLE_BUILD_NUM"






  
#  deploy-app:
#    docker:
#      - image: circleci/node:13.8.0
#    steps:
#      - checkout
#      - run:
#          name: Install dependencies
#          command: |
#            sudo apt install -y tar gzip curl unzip
#      - run:
#          name: Install kubectl
#          command: |
#            curl -LO https://dl.k8s.io/release/v1.25.0/bin/linux/amd64/kubectl
#            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
#      - run:
#          name: Install aws-cli
#          command: |
#            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#            unzip awscliv2.zip
#            sudo ./aws/install
#      - run:
#          name: Deploy app
#          command: |
#            DOCKER_PATH="thanhlam00290/udacity-project5"
#            sed "s+thanhlam00290/udacity-project5:0.1+$DOCKER_PATH:${CIRCLE_WORKFLOW_ID:0:7}+g" app-deployment.yml >> deploy.yml
#            aws eks --region us-east-1 update-kubeconfig --name eksctl-demo
#            kubectl apply -f ./deploy.yml
#            kubectl get node
#            kubectl get pods -o wide       

#            apk add --no-cache \
#              py-pip=9.0.0-r1
#            pip install \
#              docker-compose==1.12.0 \
#              awscli==1.11.76 \
#              curl==7.67.0-r0



#docker:17.05.0-ce-git
#              awscli==1.15.32
# curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"